Operações síncronas são aquelas que acontecem ao mesmo tempo.
Exemplo: o código se depara com uma cláusula Future, que vai levar algum tempo para completar, mas o
 resto do código continua sendo executado juntamente com o Future.

Operações assíncronas são aquelas que interrompem a execução do código.
Exemplo: o código se depara com uma cláusula Future antecedida por um comando await.
Neste caso, a execução desse trecho de código será interrompida até que se atinja o resultado.

Normalmente, as duas são combinadas:
- operações síncronas para o código da aplicação como um to.do, que não pode esperar nem depender de
 coisas que levam tempo
- operações assíncronas para funções e métodos específicos; métodos estes que precisam esperar por
algo para poder continuar a execução e retornar o resultado correto



Dart é uma linguagem singleThread, ou seja, as tarefas são executadas em apenas uma thread de execução por vez (CPU).
Entretanto, suporta progração concorrente com o uso dos isolates (unidades de execução).

Dart é uma linguagem síncrona, ou seja, cada tarefa é executadae por vez pelo programa, na ordem em que aparecem.
Caso alguma tarefa demore para executar (ou para receber algo), todo o resto do programa vai esperar pela sua conclusão para continuar. 
Em alguns casos isso pode gerar travamento e seria interessante se o programa pudesse continuar seu fluxo enquanto certa tarefa
mais demorada seja concluída.
Assincronismo é quando tarefas são executadas "simultaneamente", em segundo plano.
ATENÇÃO: trata-se de realizar uma tarefa enquanto ESPERA-SE que outra seja executada. É diferente de realizar duas ao mesmo tempo. 
Exemplo: apertei o botão da máquina de lavar. Agora a máquina é a responsável por lavar a roupa e posso fazer outras coisas enquanto 
isso. 
Não estou realizando duas ações ao mesmo tempo. Estou esperando para que a ação que comecei termine.

Para adicionar assincronismo ao código, ou seja, permitir que alguma tarefa espere por algo enquanto o resto do código continua, 
podem ser usadas duas ferrramentas:
- Future
- Streams

No Future, a tarefa é concluída quando se atinge o que espera (ex.: receber algo do banco de dados).
No Steam, a tarefa é concluída quando se atinge o intervalo pré-determinado. A tarefa pode receber dados continuamente. 
Resumidamente, o Future serve para receber apenas uma coisa e o Stream serve para receber várias coisas.

Para se usar Future, usa-se objetos do tipo Future ou métodos que retornam o tipo Future. 
Para se usar Streams, usam-se objetos Stream ou funções que retornam o tipo Stream. E ouvintes que são ativados como métodos não 
estáticos do tipo Stream.


Observação Importante: Ao se chamar os métodos de Futures, Streams e Ouvintes é importante criar instâncias para criar 
aquele objeto específico. Caso contrário, se perderá controle sobre a Stream ou Future iniciado ou iniciada. 

Ok. Future é utilizado para que o código continue rodando enquanto uma outra função aguarda receber algo.
Quando essa função recebe o que está esperando, é encerrada.

Pode-se utilizar a clausula await, que pede para que a execução do codigo espere a resposta de um
comando para que o restante seja executado.

Mas e caso eu receba informações continuamente e, mesmo após cada recebimento eu não queira encerrar a função?
Por exemplo, no whatsapp, quando alguma mensagem é recebida, a função assíncrona que recebe mensagens não é encerrada.
Ela continua rodando, recebendo mais mensagens e tratando essas mensagens enquanto isso.
É aí que entram os Streams!!!